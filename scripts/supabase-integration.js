/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Supabase –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º API –∏ –Ω–æ–≤—ã–º Supabase
 */

import { supabaseAuth } from './supabase-auth.js';
import { supabaseSync } from './supabase-sync.js';
import { getCurrentUser, isAuthenticated } from './supabase-client.js';

/**
 * –ê–¥–∞–ø—Ç–µ—Ä authStore –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç authStore
 */
export const authStoreAdapter = {
  _listeners: new Set(),
  _currentUser: null,

  async init() {
    console.log('üîë AuthStore (Supabase): init()');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    const user = await getCurrentUser();
    this._currentUser = user;
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è auth —Å–æ—Å—Ç–æ—è–Ω–∏—è
    supabaseAuth.onAuthStateChange((event, session) => {
      console.log('üîê Auth state changed:', event);
      
      this._currentUser = session?.user || null;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      this._notifyListeners();
    });

    return this._currentUser;
  },

  async login(email, password) {
    console.log('üîê AuthStore (Supabase): login()');
    const { user, session } = await supabaseAuth.signIn(email, password);
    this._currentUser = user;
    this._notifyListeners();
    return { user, session };
  },

  async register(email, password) {
    console.log('üìù AuthStore (Supabase): register()');
    const { user, session } = await supabaseAuth.signUp(email, password);
    this._currentUser = user;
    this._notifyListeners();
    return { user, session };
  },

  async logout() {
    console.log('üö™ AuthStore (Supabase): logout()');
    await supabaseAuth.signOut();
    this._currentUser = null;
    this._notifyListeners();
  },

  getUser() {
    return this._currentUser;
  },

  async isAuthenticated() {
    return await isAuthenticated();
  },

  subscribe(callback) {
    this._listeners.add(callback);
    
    // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º callback —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    callback(this._currentUser);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this._listeners.delete(callback);
    };
  },

  _notifyListeners() {
    this._listeners.forEach(callback => {
      callback(this._currentUser);
    });
  }
};

/**
 * –ê–¥–∞–ø—Ç–µ—Ä syncManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 */
export const syncManagerAdapter = {
  _realtimeChannel: null,
  _onStateUpdate: null,

  async loadState() {
    console.log('üì• SyncManager (Supabase): loadState()');
    return await supabaseSync.loadState();
  },

  async saveState(state) {
    console.log('üíæ SyncManager (Supabase): saveState()');
    await supabaseSync.saveState(state);
  },

  async startSync(onStateUpdate) {
    console.log('üîÑ SyncManager (Supabase): startSync()');
    this._onStateUpdate = onStateUpdate;
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ realtime –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this._realtimeChannel = await supabaseSync.subscribe((newState) => {
      console.log('üîî Realtime update received');
      if (this._onStateUpdate) {
        this._onStateUpdate(newState);
      }
    });
  },

  async stopSync() {
    console.log('‚èπÔ∏è SyncManager (Supabase): stopSync()');
    await supabaseSync.unsubscribe();
    this._realtimeChannel = null;
    this._onStateUpdate = null;
  },

  // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
  setStatus() {
    // Supabase –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
  },

  getStatus() {
    return { syncing: false, error: null };
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ä–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ Supabase
 */
export async function migrateFromOldBackend(oldToken, email, password) {
  try {
    console.log('üîÑ Starting migration from old backend...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ API
    const response = await fetch('https://task-man-rf22.onrender.com/state', {
      headers: {
        'Authorization': `Bearer ${oldToken}`
      }
    });

    if (!response.ok) {
      throw new Error('Failed to fetch old state');
    }

    const oldState = await response.json();
    console.log('‚úÖ Old state fetched');

    // 2. –í—Ö–æ–¥–∏–º –≤ Supabase (–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è)
    try {
      await supabaseAuth.signIn(email, password);
    } catch (error) {
      if (error.message.includes('Invalid login')) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º
        await supabaseAuth.signUp(email, password);
      } else {
        throw error;
      }
    }
    console.log('‚úÖ Authenticated in Supabase');

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase
    await supabaseSync.saveState({
      meta: oldState.meta || { version: 0, updatedAt: Date.now() },
      folders: oldState.folders || [],
      tasks: oldState.tasks || [],
      archivedTasks: oldState.archivedTasks || [],
      ui: oldState.ui || {}
    });
    console.log('‚úÖ State saved to Supabase');

    console.log('üéâ Migration completed successfully!');
    return true;
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    throw error;
  }
}
